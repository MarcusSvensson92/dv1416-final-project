//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
    float3  gCameraPosition;            // Offset:  128, size:   12
    PointLight gLight;                  // Offset:  144, size:   80
}

cbuffer cbConstants
{
    float2  gTexCoords[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 3 local object(s)
//
Texture2D gDiffuseMap;
SamplerState linSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
BlendState AlphaBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[1] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[2] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[3] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[4] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[5] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[6] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[7] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlendAlpha[7] = uint(SRC_ALPHA /* 5 */);
    DestBlendAlpha[0] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[1] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[2] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[3] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[4] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[5] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[6] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlendAlpha[7] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 RenderTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //   float3 gCameraPosition;            // Offset:  128 Size:    12 [unused]
                //   
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Att;                    // Offset:  208
                //       float Pad;                     // Offset:  220
                //
                //   } gLight;                          // Offset:  144 Size:    80
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                
                #line 73 "C:\Users\Marcus\Desktop\dv1416-final-project\Shaders\LightShader.fx"
                mov r0.xyz, cb0[12].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                mov o0.xyz, r1.xyzx  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o1.xy, l(1.000000,1.000000,0,0)  // VS<3: 1f,4: 1f>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float3 gCameraPosition;            // Offset:  128 Size:    12
                //   
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Att;                    // Offset:  208
                //       float Pad;                     // Offset:  220
                //
                //   } gLight;                          // Offset:  144 Size:    80 [unused]
                //
                // }
                //
                // cbuffer cbConstants
                // {
                //
                //   float2 gTexCoords[4];              // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbConstants                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL_W                 0   xyz         2     NONE  float   xyz 
                // TEX                      0   xy          3     NONE  float   xy  
                //
                gs_4_0
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_temps 7
                dcl_inputprimitive point 
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_maxout 4
                
                #line 86 "C:\Users\Marcus\Desktop\dv1416-final-project\Shaders\LightShader.fx"
                mov r0.xyz, -v[0][0].xyzx
                add r0.xyz, r0.xyzx, cb0[8].xyzx  // look<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // look<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r0.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
                mul r2.xyz, r0.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
                mov r2.xyz, -r2.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // right<0:NaN:Inf,1: 0f,2:NaN:Inf>
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // right<0:NaN:Inf,1: 0f,2:NaN:Inf>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r3.xyz, r0.zxyz, r1.yzxy
                mov r3.xyz, -r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // up<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                mul r0.w, l(0.500000), v[0][1].x  // halfWidth<0:[-1.70141e+038f,1.70141e+038f]>
                mul r1.w, l(0.500000), v[0][1].y  // halfHeight<0:[-1.70141e+038f,1.70141e+038f]>
                
                #line 97
                mul r3.xyz, r0.wwww, r1.xyzx
                mov r4.xyz, -r2.xyzx
                mul r4.xyz, r1.wwww, r4.xyzx
                add r5.xyz, r3.xyzx, r4.xyzx
                add r5.xyz, r5.xyzx, v[0][0].xyzx
                mul r2.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r2.xyzx, r3.xyzx
                add r3.xyz, r3.xyzx, v[0][0].xyzx
                mov r1.xyz, -r1.xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r4.xyz, r4.xyzx, r1.xyzx
                add r4.xyz, r4.xyzx, v[0][0].xyzx
                add r1.xyz, r2.xyzx, r1.xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                
                #line 106
                mov r2.xy, cb1[0].xyxx  // output<10,11>
                mov r5.w, l(1.000000)
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // output<0:NaN:Inf>
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // output<1:NaN:Inf>
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // output<2:NaN:Inf>
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // output<3:NaN:Inf>
                mov r5.xyz, r5.xyzx  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov r0.xyz, r0.xyzx  // output<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o0.xyzw, r6.xyzw  // stream<0,0,0,0>
                mov o1.xyz, r5.xyzx  // stream<0,0,0>
                mov o2.xyz, r0.xyzx  // stream<0,0,0>
                mov o3.xy, r2.xyxx  // stream<0,0>
                emit 
                
                #line 106
                mov r2.xy, cb1[1].xyxx  // output<10,11>
                mov r3.w, l(1.000000)
                dp4 r5.x, r3.xyzw, cb0[4].xyzw  // output<0:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[5].xyzw  // output<1:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[6].xyzw  // output<2:NaN:Inf>
                dp4 r5.w, r3.xyzw, cb0[7].xyzw  // output<3:NaN:Inf>
                mov r3.xyz, r3.xyzx  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                
                #line 111
                mov o0.xyzw, r5.xyzw  // stream<0,0,0,0>
                mov o1.xyz, r3.xyzx  // stream<0,0,0>
                mov o2.xyz, r0.xyzx  // stream<0,0,0>
                mov o3.xy, r2.xyxx  // stream<0,0>
                emit 
                
                #line 106
                mov r2.xy, cb1[2].xyxx  // output<10,11>
                mov r4.w, l(1.000000)
                dp4 r3.x, r4.xyzw, cb0[4].xyzw  // output<0:NaN:Inf>
                dp4 r3.y, r4.xyzw, cb0[5].xyzw  // output<1:NaN:Inf>
                dp4 r3.z, r4.xyzw, cb0[6].xyzw  // output<2:NaN:Inf>
                dp4 r3.w, r4.xyzw, cb0[7].xyzw  // output<3:NaN:Inf>
                mov r4.xyz, r4.xyzx  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                
                #line 111
                mov o0.xyzw, r3.xyzw  // stream<0,0,0,0>
                mov o1.xyz, r4.xyzx  // stream<0,0,0>
                mov o2.xyz, r0.xyzx  // stream<0,0,0>
                mov o3.xy, r2.xyxx  // stream<0,0>
                emit 
                
                #line 106
                mov r2.xy, cb1[3].xyxx  // output<10,11>
                mov r1.w, l(1.000000)
                dp4 r3.x, r1.xyzw, cb0[4].xyzw  // output<0:NaN:Inf>
                dp4 r3.y, r1.xyzw, cb0[5].xyzw  // output<1:NaN:Inf>
                dp4 r3.z, r1.xyzw, cb0[6].xyzw  // output<2:NaN:Inf>
                dp4 r3.w, r1.xyzw, cb0[7].xyzw  // output<3:NaN:Inf>
                mov r1.xyz, r1.xyzx  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                
                #line 111
                mov o0.xyzw, r3.xyzw  // stream<0,0,0,0>
                mov o1.xyz, r1.xyzx  // stream<0,0,0>
                mov o2.xyz, r0.xyzx  // stream<0,0,0>
                mov o3.xy, r2.xyxx  // stream<0,0>
                emit 
                
                #line 79
                ret 
                // Approximately 82 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linSampler                        sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL_W                 0   xyz         2     NONE  float       
                // TEX                      0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 117 "C:\Users\Marcus\Desktop\dv1416-final-project\Shaders\LightShader.fx"
                sample r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov o0.xyzw, r0.xyzw  // PS<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            RasterizerState = NULL;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AlphaBlending;
        }

    }

}

