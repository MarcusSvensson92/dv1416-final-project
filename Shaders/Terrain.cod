//
// FX Version: fx_5_0
//
// 5 local buffer(s)
//
cbuffer $Globals
{
    int     sMapSize;                   // Offset:    0, size:    4
}

cbuffer Lights
{
    PointLight gPointLights[10];        // Offset:    0, size:  800
    DirectionalLight gDirectionalLights[2];// Offset:  800, size:  128
}

cbuffer Shadows
{
    float4x4 gPLVP[60];                 // Offset:    0, size: 3840
    float4x4 gDLVP0;                    // Offset: 3840, size:   64
    float4x4 gDLVP1;                    // Offset: 3904, size:   64
}

cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float3  gCameraPosition;            // Offset:  128, size:   12
    float   gTextureScale;              // Offset:  140, size:    4
    float   gMinDistance;               // Offset:  144, size:    4
    float   gMaxDistance;               // Offset:  148, size:    4
    float   gMinTessellation;           // Offset:  152, size:    4
    float   gMaxTessellation;           // Offset:  156, size:    4
    float2  gTexelSize;                 // Offset:  160, size:    8
    float3  gTargetPosition;            // Offset:  176, size:   12
    float   gTargetDiameter;            // Offset:  188, size:    4
    float4  gFrustumPlanes[6];          // Offset:  192, size:   96
    float   gMinY;                      // Offset:  288, size:    4
    float   gMaxY;                      // Offset:  292, size:    4
}

cbuffer cbPerObject
{
    Material gMaterial;                 // Offset:    0, size:   64
}

//
// 13 local object(s)
//
Texture2D gDLightShadow0;
Texture2D gDLightShadow1;
SamplerState shadSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
};
SamplerComparisonState shadSampler2
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2D gHeightmap;
Texture2D gBlendmap;
Texture2D gLayermap0;
Texture2D gLayermap1;
Texture2D gLayermap2;
Texture2D gLayermap3;
RasterizerState wireframeRS
{
    FillMode = uint(WIREFRAME /* 2 */);
};
SamplerState linearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState heightmapSampler
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 RenderTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float3 gCameraPosition;            // Offset:  128 Size:    12 [unused]
                //   float gTextureScale;               // Offset:  140 Size:     4 [unused]
                //   float gMinDistance;                // Offset:  144 Size:     4 [unused]
                //   float gMaxDistance;                // Offset:  148 Size:     4 [unused]
                //   float gMinTessellation;            // Offset:  152 Size:     4 [unused]
                //   float gMaxTessellation;            // Offset:  156 Size:     4 [unused]
                //   float2 gTexelSize;                 // Offset:  160 Size:     8 [unused]
                //   float3 gTargetPosition;            // Offset:  176 Size:    12 [unused]
                //   float gTargetDiameter;             // Offset:  188 Size:     4 [unused]
                //   float4 gFrustumPlanes[6];          // Offset:  192 Size:    96 [unused]
                //   float gMinY;                       // Offset:  288 Size:     4 [unused]
                //   float gMaxY;                       // Offset:  292 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // heightmapSampler                  sampler      NA          NA    0        1
                // gHeightmap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEX                      0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEX                      0   xy          1     NONE  float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                
                #line 77 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                sample_l r0.xyzw, v1.xyxx, t2.yxzw, s0, l(0.000000)  // output<1:Inf>
                mov r0.xz, v0.xxzx
                dp3 r1.x, r0.xyzx, cb0[0].xyzx  // output<0:NaN:Inf>
                dp3 r1.y, r0.xyzx, cb0[1].xyzx  // output<1:NaN:Inf>
                dp3 r1.z, r0.xyzx, cb0[2].xyzx  // output<2:NaN:Inf>
                mov r0.xy, v1.xyxx  // output<3,4>
                mov o0.xyz, r1.xyzx  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o1.xy, r0.xyxx  // VS<3,4>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float3 gCameraPosition;            // Offset:  128 Size:    12
                //   float gTextureScale;               // Offset:  140 Size:     4 [unused]
                //   float gMinDistance;                // Offset:  144 Size:     4
                //   float gMaxDistance;                // Offset:  148 Size:     4
                //   float gMinTessellation;            // Offset:  152 Size:     4
                //   float gMaxTessellation;            // Offset:  156 Size:     4
                //   float2 gTexelSize;                 // Offset:  160 Size:     8 [unused]
                //   float3 gTargetPosition;            // Offset:  176 Size:    12 [unused]
                //   float gTargetDiameter;             // Offset:  188 Size:     4 [unused]
                //   float4 gFrustumPlanes[6];          // Offset:  192 Size:    96
                //   float gMinY;                       // Offset:  288 Size:     4
                //   float gMaxY;                       // Offset:  292 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEX                      0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEX                      0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], dynamicIndexed
                
                #line 169 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // output<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // output<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 120
                ret   // minVector<0,2>
                hs_join_phase   // minVector<1>
                dcl_input vicp[4][0].xyz
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                mov r0.xz, vicp[2][0].xxzx  // maxVector<0,2>
                mov r0.y, cb0[18].x  // maxVector<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, cb0[18].y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 103
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // isAabbOutsideFrustum<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 93
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 12].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                  mov r6.xyz, -r5.xyzx  // e<0:NaN:Inf>
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // isAabbBehindPlane<0>
                
                #line 104
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // isAabbOutsideFrustum<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 106
                  mov r1.z, r1.w
                endloop   // isAabbOutsideFrustum<0: false>
                if_z r1.z
                
                #line 125
                  mov r1.x, l(0)
                endif   // output<2: 0f,3: 0f,4: 0f,5: 0f>
                if_nz r1.x  // output<0: 0f,1: 0f>
                  mov r2.xyzw, l(0,0,0,0)
                
                #line 136
                  mov r6.xy, l(0,0,0,0)
                else   // edge0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // edge1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // edge2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // edge3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // center<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 111
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[8].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[9].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[9].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[9].w
                  add r0.w, r0.w, cb0[9].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[9].w  // computeTessellationFactor<0:NaN:Inf>
                
                #line 142
                  mul r0.x, r0.x, l(1.000000)  // output<0:NaN:Inf>
                  exp r6.x, r0.x
                  mov r6.x, r6.x  // p<0,1,2>
                
                #line 111
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                  dp3 r0.x, r2.xyzx, r2.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.y, r0.x
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[9].w  // computeTessellationFactor<0:NaN:Inf>
                
                #line 143
                  mul r0.x, r0.x, l(1.000000)  // output<1:NaN:Inf>
                  exp r6.y, r0.x
                  mov r6.y, r6.y  // p<0,1,2>
                
                #line 111
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                  dp3 r0.x, r2.xyzx, r2.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.y, r0.x
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[9].w  // computeTessellationFactor<0:NaN:Inf>
                
                #line 144
                  mul r0.x, r0.x, l(1.000000)  // output<2:NaN:Inf>
                  exp r2.x, r0.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 111
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                  dp3 r0.x, r3.xyzx, r3.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.y, r0.x
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[9].w  // computeTessellationFactor<0:NaN:Inf>
                
                #line 145
                  mul r0.x, r0.x, l(1.000000)  // output<3:NaN:Inf>
                  exp r2.y, r0.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 111
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                  dp3 r0.x, r1.xyzx, r1.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.y, r0.x
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[9].w  // computeTessellationFactor<0:NaN:Inf>
                  mul r0.x, r0.x, l(1.000000)  // computeTessellationFactor<0:NaN:Inf>
                
                #line 146
                  exp r2.w, r0.x  // output<4:NaN:Inf>
                  mov r2.z, r2.w  // output<5:NaN:Inf>
                
                #line 125
                  mov r2.z, r2.z
                
                #line 150
                  mov r2.w, r2.w  // ConstantHS<2:NaN:Inf,3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                endif   // ConstantHS<0:NaN:Inf,1:NaN:Inf>
                mov r2.xyzw, r2.xyzw  // ConstantHS<0:[-0f,64f]>
                mov r6.xy, r6.xyxx  // ConstantHS<1:[-0f,64f]>
                min o0.x, r6.x, l(64.000000)  // ConstantHS<2:[-0f,64f],3:[-0f,64f],4:[-0f,64f],5:[-0f,64f]>
                min o1.x, r6.y, l(64.000000)  // ConstantHS<2:[-0f,64f]>
                min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[-0f,64f]>
                mov o2.x, r0.x  // ConstantHS<4:[-0f,64f]>
                mov o3.x, r0.y  // ConstantHS<5:[-0f,64f]>
                mov o4.x, r0.z
                
                // incorrect instruction offset in debug info
                mov o5.x, r0.w
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 152 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float3 gCameraPosition;            // Offset:  128 Size:    12 [unused]
                //   float gTextureScale;               // Offset:  140 Size:     4
                //   float gMinDistance;                // Offset:  144 Size:     4 [unused]
                //   float gMaxDistance;                // Offset:  148 Size:     4 [unused]
                //   float gMinTessellation;            // Offset:  152 Size:     4 [unused]
                //   float gMaxTessellation;            // Offset:  156 Size:     4 [unused]
                //   float2 gTexelSize;                 // Offset:  160 Size:     8
                //   float3 gTargetPosition;            // Offset:  176 Size:    12 [unused]
                //   float gTargetDiameter;             // Offset:  188 Size:     4 [unused]
                //   float4 gFrustumPlanes[6];          // Offset:  192 Size:    96 [unused]
                //   float gMinY;                       // Offset:  288 Size:     4 [unused]
                //   float gMaxY;                       // Offset:  292 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // heightmapSampler                  sampler      NA          NA    0        1
                // gHeightmap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEX                      0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEX                      0   xy          3     NONE  float   xy  
                // TEX                      1     zw        3     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_temps 6
                
                #line 190 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // output<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // output<4:NaN:Inf,6:NaN:Inf>
                
                #line 193
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // output<10:NaN:Inf,11:NaN:Inf>
                mul r2.xy, r1.zwzz, cb0[8].wwww  // output<12:NaN:Inf,13:NaN:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t2.yxzw, s0, l(0.000000)  // output<5:Inf>
                mov r2.z, r0.y  // output<5:Inf>
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb0[4].xyzw  // output<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[5].xyzw  // output<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[6].xyzw  // output<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[7].xyzw  // output<3:NaN:Inf>
                
                #line 202
                mov r0.x, -cb0[10].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, r1.zwzz  // leftTex0<0:NaN:Inf,1:NaN:Inf>
                mov r4.x, cb0[10].x
                mov r4.y, l(0)
                add r0.zw, r1.zzzw, r4.xxxy  // rightTex0<0:NaN:Inf,1:NaN:Inf>
                mov r4.x, l(0)
                mov r4.y, cb0[10].y
                add r4.xy, r1.zwzz, r4.xyxx  // bottomTex0<0:NaN:Inf,1:NaN:Inf>
                mov r5.x, l(0)
                mov r5.y, -cb0[10].y
                add r4.zw, r1.zzzw, r5.xxxy  // topTex0<0:NaN:Inf,1:NaN:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s0, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s0, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r4.xyxx, t2.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r4.zwzz, t2.yzwx, s0, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r4.z, r0.x, r0.y
                mov r4.xy, l(0,2.000000,0,0)
                dp3 r0.x, r4.xyzx, r4.xyzx
                rsq r0.x, r0.x
                mul r4.xyz, r0.xxxx, r4.xyzx  // tangent<2: 0f,0:NaN,1:NaN:Inf>
                
                #line 213
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.yz, l(0,-2.000000,0,0)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN,0: 0f>
                mul r5.xyz, r0.yzxy, r4.zxyz
                mul r0.xyz, r0.xyzx, r4.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r5.xyzx  // output<7:NaN:Inf,8:NaN,9:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o3.xy, r1.zwzz  // DS<10:NaN:Inf,11:NaN:Inf>
                mov o3.zw, r2.xxxy  // DS<12:NaN:Inf,13:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                mov o2.xyz, r0.xyzx  // DS<7:NaN:Inf,8:NaN,9:NaN:Inf>
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   int sMapSize;                      // Offset:    0 Size:     4
                //
                // }
                //
                // cbuffer Lights
                // {
                //
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Position;               // Offset:   48
                //       float Range;                   // Offset:   60
                //       float3 Att;                    // Offset:   64
                //       float Pad;                     // Offset:   76
                //
                //   } gPointLights[10];                // Offset:    0 Size:   800
                //   
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:  800
                //       float4 Diffuse;                // Offset:  816
                //       float4 Specular;               // Offset:  832
                //       float3 Direction;              // Offset:  848
                //       float Pad;                     // Offset:  860
                //
                //   } gDirectionalLights[2];           // Offset:  800 Size:   128
                //
                // }
                //
                // cbuffer Shadows
                // {
                //
                //   float4x4 gPLVP[60];                // Offset:    0 Size:  3840 [unused]
                //   float4x4 gDLVP0;                   // Offset: 3840 Size:    64
                //   float4x4 gDLVP1;                   // Offset: 3904 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float3 gCameraPosition;            // Offset:  128 Size:    12
                //   float gTextureScale;               // Offset:  140 Size:     4 [unused]
                //   float gMinDistance;                // Offset:  144 Size:     4 [unused]
                //   float gMaxDistance;                // Offset:  148 Size:     4 [unused]
                //   float gMinTessellation;            // Offset:  152 Size:     4 [unused]
                //   float gMaxTessellation;            // Offset:  156 Size:     4 [unused]
                //   float2 gTexelSize;                 // Offset:  160 Size:     8 [unused]
                //   float3 gTargetPosition;            // Offset:  176 Size:    12
                //   float gTargetDiameter;             // Offset:  188 Size:     4
                //   float4 gFrustumPlanes[6];          // Offset:  192 Size:    96 [unused]
                //   float gMinY;                       // Offset:  288 Size:     4 [unused]
                //   float gMaxY;                       // Offset:  292 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // shadSampler2                    sampler_c      NA          NA    0        1
                // linearSampler                     sampler      NA          NA    1        1
                // gDLightShadow0                    texture  float4          2d    0        1
                // gDLightShadow1                    texture  float4          2d    1        1
                // gBlendmap                         texture  float4          2d    2        1
                // gLayermap0                        texture  float4          2d    3        1
                // gLayermap1                        texture  float4          2d    4        1
                // gLayermap2                        texture  float4          2d    5        1
                // gLayermap3                        texture  float4          2d    6        1
                // $Globals                          cbuffer      NA          NA    0        1
                // Lights                            cbuffer      NA          NA    1        1
                // Shadows                           cbuffer      NA          NA    2        1
                // cbPerFrame                        cbuffer      NA          NA    3        1
                // cbPerObject                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEX                      0   xy          3     NONE  float   xy  
                // TEX                      1     zw        3     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[58], dynamicIndexed
                dcl_constantbuffer cb2[248], immediateIndexed
                dcl_constantbuffer cb3[12], immediateIndexed
                dcl_constantbuffer cb4[3], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.zw
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 222 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                mov r0.xy, -cb3[11].xzxx
                add r0.xy, r0.xyxx, v1.xzxx
                dp2 r0.x, r0.xyxx, r0.xyxx
                sqrt r0.x, r0.x  // l<0:NaN:Inf>
                div r0.y, cb3[11].w, l(2.000000)
                lt r0.z, r0.y, r0.x
                add r0.y, r0.y, l(0.500000)
                lt r0.x, r0.x, r0.y
                and r0.x, r0.x, r0.z
                if_nz r0.x
                  mov o0.xyzw, l(1.000000,0,0,1.000000)  // PS<0: 1f,1: 0f,2: 0f,3: 1f>
                  ret 
                endif 
                
                #line 226
                sample r0.xyzw, v3.zwzz, t3.xyzw, s1  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                sample r1.xyzw, v3.zwzz, t4.xyzw, s1  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                sample r2.xyzw, v3.zwzz, t5.xyzw, s1  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                sample r3.xyzw, v3.zwzz, t6.xyzw, s1  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                sample r4.xyzw, v3.xyxx, t2.xyzw, s1  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 234
                add r0.xyzw, r0.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
                mul r0.xyzw, r0.xyzw, r4.xxxx
                add r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, -r0.xyzw
                add r1.xyzw, r1.xyzw, r5.xyzw
                mul r1.xyzw, r1.xyzw, r4.yyyy
                add r0.xyzw, r0.xyzw, r1.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.xyzw, -r0.xyzw
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r1.xyzw, r1.xyzw, r4.zzzz
                add r0.xyzw, r0.xyzw, r1.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.xyzw, -r0.xyzw
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r4.wwww
                add r0.xyzw, r0.xyzw, r1.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 240
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb3[8].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                dp3 r1.w, r1.xyzx, r1.xyzx
                sqrt r1.w, r1.w  // distToEye<0:NaN:Inf>
                div r1.xyz, r1.xyzx, r1.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                mov r2.xyz, l(0,0,0,0)  // ambient<0: -0f,1: -0f,2: -0f>
                
                #line 250
                mov r1.w, l(0)  // i<0: 0u>
                mov r3.xyz, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r2.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(10)
                  breakc_z r3.w
                
                #line 267
                  nop 
                  mov r6.xyz, cb4[0].xyzx  // mat<0,1,2>
                  mov r7.xyz, cb4[1].xyzx  // mat<4,5,6>
                  mov r8.xyzw, cb4[2].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r2.w, l(5)
                  mov r9.xyz, cb1[r3.w + 0].xyzx  // L<0,1,2>
                  mov r10.xyz, cb1[r3.w + 1].xyzx  // L<4,5,6>
                  mov r11.xyz, cb1[r3.w + 2].xyzx  // L<8,9,10>
                  mov r12.xyz, cb1[r3.w + 3].xyzx  // L<12,13,14>
                  mov r4.w, cb1[r3.w + 3].w  // L<15>
                  mov r13.xyz, cb1[r3.w + 4].xyzx  // L<16,17,18>
                  mov r14.xyz, v1.xyzx  // pos<0,1,2>
                  mov r15.xyz, v2.xyzx  // normal<0,1,2>
                  mov r16.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 32 "Light.fx"
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                  dp3 r3.w, r12.xyzx, r12.xyzx
                  sqrt r14.y, r3.w  // d<0:NaN:Inf>
                  lt r3.w, r4.w, r14.y
                  if_z r3.w
                    div r12.xyz, r12.xyzx, r14.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                    dp3 r3.w, r12.xyzx, r15.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 43
                    lt r4.w, l(0.000000), r3.w
                    mov r9.xyz, -r12.xyzx
                    dp3 r5.w, r9.xyzx, r15.xyzx
                    add r5.w, r5.w, r5.w
                    mov r5.w, -r5.w
                    mul r12.xyz, r5.wwww, r15.xyzx
                    add r9.xyz, r9.xyzx, r12.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r5.w, r9.xyzx, r16.xyzx
                    max r5.w, r5.w, l(0.000000)
                    log r5.w, r5.w
                    mul r5.w, r5.w, r8.w
                    exp r5.w, r5.w  // specFactor<0:NaN:Inf>
                    mul r7.xyz, r7.xyzx, r3.wwww
                    mul r7.xyz, r10.xyzx, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r8.xyz, r8.xyzx, r5.wwww
                    mul r8.xyz, r11.xyzx, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 43
                    movc r7.xyz, r4.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r8.xyz, r4.wwww, r8.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 52
                    mul r14.z, r14.y, r14.y
                    mov r14.x, l(1.000000)
                    dp3 r3.w, r13.xyzx, r14.xyzx
                    div r3.w, l(1.000000), r3.w  // att<0:NaN:Inf>
                    mul r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r8.xyz, r3.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 36
                  else 
                    mov r6.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                    mov r7.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 267 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                  mov r6.xyz, r6.xyzx  // A<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.xyz, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  add r4.xyz, r4.xyzx, r6.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  add r5.xyz, r5.xyzx, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 250
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 273
                mov r2.xyz, r3.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r7.xyz, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0:[0u,2u]>
                loop 
                  ult r3.w, r2.w, l(2)
                  breakc_z r3.w
                  imul null, r3.w, r2.w, l(4)
                  lt r4.w, l(0.000000), cb1[r3.w + 53].w
                  if_nz r4.w
                
                #line 278
                    eq r4.w, cb1[r3.w + 53].w, l(2.000000)
                    if_nz r4.w
                      if_z r2.w
                        nop 
                        mov r8.xyz, v1.xyzx
                        mov r8.w, l(1.000000)
                        dp4 r9.x, r8.xyzw, cb2[240].xyzw  // lpos<0:NaN:Inf>
                        dp4 r9.y, r8.xyzw, cb2[241].xyzw  // lpos<1:NaN:Inf>
                        dp4 r9.z, r8.xyzw, cb2[242].xyzw  // lpos<2:NaN:Inf>
                        dp4 r4.w, r8.xyzw, cb2[243].xyzw  // lpos<3:NaN:Inf>
                
                #line 25 "Shadow.fx"
                        div r8.xyz, r9.xyzx, r4.wwww  // lpos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 29
                        lt r4.w, r8.x, l(-1.000000)
                        lt r5.w, l(1.000000), r8.x
                        or r4.w, r4.w, r5.w
                        lt r5.w, r8.y, l(-1.000000)
                        or r4.w, r4.w, r5.w
                        lt r5.w, l(1.000000), r8.y
                        or r4.w, r4.w, r5.w
                        lt r5.w, r8.z, l(0.000000)
                        or r4.w, r4.w, r5.w
                        lt r5.w, l(1.000000), r8.z
                        or r4.w, r4.w, r5.w
                        if_nz r4.w
                
                #line 32
                          mov r5.w, l(0)  // ComputeShadowMap<0: 0f>
                
                #line 29
                        endif 
                
                #line 35
                        if_z r4.w
                          div r4.w, r8.x, l(2.000000)
                          add r9.x, r4.w, l(0.500000)  // lpos<0:NaN:Inf>
                          div r4.w, r8.y, l(-2.000000)
                          add r9.y, r4.w, l(0.500000)  // lpos<1:NaN:Inf>
                          itof r4.w, cb0[0].x
                          div r10.y, l(1.000000), r4.w  // dx<0:Inf>
                          mov r4.w, r10.y  // dx<0:Inf>
                
                #line 45
                          mov r8.y, -r4.w  // offsets<3:Inf>
                          mov r10.z, -r4.w  // offsets<5:Inf>
                          mov r11.x, -r4.w  // offsets<6:Inf>
                          mov r10.x, -r4.w  // offsets<12:Inf>
                
                #line 51
                          mov r4.w, -r4.w
                          add r9.zw, r4.wwww, r9.xxxy
                          sample_c_lz r4.w, r9.zwzz, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, l(0.000000)  // percentLit<0:[0f,1f]>
                          mov r8.x, l(0)
                          add r8.xy, r8.xyxx, r9.xyxx
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,2f]>
                          add r8.xy, r9.xyxx, r10.yzyy
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,3f]>
                          mov r11.y, l(0)
                          add r8.xy, r9.xyxx, r11.xyxx
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,4f]>
                          add r8.xy, r9.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,5f]>
                          mov r10.w, l(0)
                          add r8.xy, r9.xyxx, r10.ywyy
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,6f]>
                          add r8.xy, r9.xyxx, r10.xyxx
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,7f]>
                          add r8.xy, r9.xyxx, r10.wyww
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,8f]>
                          add r8.xy, r9.xyxx, r10.yyyy
                          sample_c_lz r6.w, r8.xyxx, t0.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,9f]>
                
                #line 54
                          div r5.w, r4.w, l(9.000000)  // ComputeShadowMap<0:[0f,1f]>
                
                #line 35
                        endif 
                
                #line 281 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                        mov r5.w, r5.w  // shadow<0:Inf>
                      else 
                
                #line 283
                        nop 
                        mov r8.xyz, v1.xyzx
                        mov r8.w, l(1.000000)
                        dp4 r9.x, r8.xyzw, cb2[244].xyzw  // lpos<0:NaN:Inf>
                        dp4 r9.y, r8.xyzw, cb2[245].xyzw  // lpos<1:NaN:Inf>
                        dp4 r9.z, r8.xyzw, cb2[246].xyzw  // lpos<2:NaN:Inf>
                        dp4 r4.w, r8.xyzw, cb2[247].xyzw  // lpos<3:NaN:Inf>
                
                #line 25 "Shadow.fx"
                        div r8.xyz, r9.xyzx, r4.wwww  // lpos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 29
                        lt r4.w, r8.x, l(-1.000000)
                        lt r6.w, l(1.000000), r8.x
                        or r4.w, r4.w, r6.w
                        lt r6.w, r8.y, l(-1.000000)
                        or r4.w, r4.w, r6.w
                        lt r6.w, l(1.000000), r8.y
                        or r4.w, r4.w, r6.w
                        lt r6.w, r8.z, l(0.000000)
                        or r4.w, r4.w, r6.w
                        lt r6.w, l(1.000000), r8.z
                        or r4.w, r4.w, r6.w
                        if_nz r4.w
                
                #line 32
                          mov r5.w, l(0)  // ComputeShadowMap<0: 0f>
                
                #line 29
                        endif 
                
                #line 35
                        if_z r4.w
                          div r4.w, r8.x, l(2.000000)
                          add r9.x, r4.w, l(0.500000)  // lpos<0:NaN:Inf>
                          div r4.w, r8.y, l(-2.000000)
                          add r9.y, r4.w, l(0.500000)  // lpos<1:NaN:Inf>
                          itof r4.w, cb0[0].x
                          div r10.y, l(1.000000), r4.w  // dx<0:Inf>
                          mov r4.w, r10.y  // dx<0:Inf>
                
                #line 45
                          mov r8.y, -r4.w  // offsets<3:Inf>
                          mov r10.z, -r4.w  // offsets<5:Inf>
                          mov r11.x, -r4.w  // offsets<6:Inf>
                          mov r10.x, -r4.w  // offsets<12:Inf>
                
                #line 51
                          mov r4.w, -r4.w
                          add r9.zw, r4.wwww, r9.xxxy
                          sample_c_lz r4.w, r9.zwzz, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, l(0.000000)  // percentLit<0:[0f,1f]>
                          mov r8.x, l(0)
                          add r8.xy, r8.xyxx, r9.xyxx
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,2f]>
                          add r8.xy, r9.xyxx, r10.yzyy
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,3f]>
                          mov r11.y, l(0)
                          add r8.xy, r9.xyxx, r11.xyxx
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,4f]>
                          add r8.xy, r9.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,5f]>
                          mov r10.w, l(0)
                          add r8.xy, r9.xyxx, r10.ywyy
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,6f]>
                          add r8.xy, r9.xyxx, r10.xyxx
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,7f]>
                          add r8.xy, r9.xyxx, r10.wyww
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,8f]>
                          add r8.xy, r9.xyxx, r10.yyyy
                          sample_c_lz r6.w, r8.xyxx, t1.xxxx, s0, r8.z
                          add r4.w, r4.w, r6.w  // percentLit<0:[0f,9f]>
                
                #line 54
                          div r5.w, r4.w, l(9.000000)  // ComputeShadowMap<0:[0f,1f]>
                
                #line 35
                        endif 
                
                #line 283 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                        mov r5.w, r5.w  // shadow<0:Inf>
                
                #line 280
                      endif 
                    else 
                
                #line 286
                      mov r5.w, l(1.000000)  // shadow<0: 1f>
                
                #line 278
                    endif 
                
                #line 289
                    nop 
                    mov r8.xyz, cb4[0].xyzx  // mat<0,1,2>
                    mov r9.xyz, cb4[1].xyzx  // mat<4,5,6>
                    mov r10.xyzw, cb4[2].xyzw  // mat<8,9,10,11>
                    mov r11.xyz, cb1[r3.w + 50].xyzx  // L<0,1,2>
                    mov r12.xyz, cb1[r3.w + 51].xyzx  // L<4,5,6>
                    mov r13.xyz, cb1[r3.w + 52].xyzx  // L<8,9,10>
                    mov r14.xyz, cb1[r3.w + 53].xyzx  // L<12,13,14>
                    mov r15.xyz, v2.xyzx  // normal<0,1,2>
                    mov r16.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 73 "Light.fx"
                    mov r14.xyz, -r14.xyzx  // lightVec<0,1,2>
                    mul r8.xyz, r8.xyzx, r11.xyzx
                    add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                    dp3 r3.w, r14.xyzx, r15.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 80
                    lt r4.w, l(0.000000), r3.w
                    max r6.w, r10.w, l(1.000000)  // specPower<0:[1f,3.40282e+038f]>
                    mov r11.xyz, -r14.xyzx
                    dp3 r7.w, r11.xyzx, r15.xyzx
                    add r7.w, r7.w, r7.w
                    mov r7.w, -r7.w
                    mul r14.xyz, r7.wwww, r15.xyzx
                    add r11.xyz, r11.xyzx, r14.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r11.xyzx, r16.xyzx
                    max r7.w, r7.w, l(0.000000)
                    log r7.w, r7.w
                    mul r6.w, r6.w, r7.w
                    exp r6.w, r6.w  // specFactor<0:Inf:[0f,1.#INFf]>
                    mul r9.xyz, r9.xyzx, r3.wwww
                    mul r9.xyz, r12.xyzx, r9.xyzx
                    add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r10.xyz, r10.xyzx, r6.wwww
                    mul r10.xyz, r13.xyzx, r10.xyzx
                    add r10.xyz, r10.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 80
                    movc r9.xyz, r4.wwww, r9.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r10.xyz, r4.wwww, r10.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 289 "C:\Users\Marcus\dv1416-final-project\Shaders\Terrain.fx"
                    mov r8.xyz, r8.xyzx  // A<0:Inf,1:Inf,2:Inf>
                    mov r9.xyz, r9.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r2.xyz, r2.xyzx, r8.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r8.xyz, r5.wwww, r9.xyzx
                    add r6.xyz, r6.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r8.xyz, r5.wwww, r10.xyzx
                    add r7.xyz, r7.xyzx, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 275
                  endif 
                  iadd r2.w, r2.w, l(1)  // i<0:[1u,3u]>
                endloop 
                
                #line 297
                add r1.xyz, r2.xyzx, r6.xyzx
                mul r0.xyz, r0.xyzx, r1.xyzx
                add r0.xyz, r7.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.w, r0.w, cb4[1].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 316 instruction slots used
                            
            };
        }

    }

}

