//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer Lights
{
    PointLight gPointLights[4];         // Offset:    0, size:  320
}

cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
    float3  gCameraPosition;            // Offset:  128, size:   12
    float3  gTargetPosition;            // Offset:  144, size:   12
    bool    gUseBlendmap;               // Offset:  156, size:    4
}

cbuffer cbPerObject
{
    Material gMaterial;                 // Offset:    0, size:   64
}

cbuffer cbConstant
{
    float   gTextureScale = 5;          // Offset:    0, size:    4
}

//
// 4 local object(s)
//
Texture2D gBlendmap;
Texture2DArray gLayermapArray;
RasterizerState wireframeRS
{
    FillMode = uint(SOLID /* 3 */);
};
SamplerState linearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 RenderTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float3 gCameraPosition;            // Offset:  128 Size:    12 [unused]
                //   float3 gTargetPosition;            // Offset:  144 Size:    12 [unused]
                //   bool gUseBlendmap;                 // Offset:  156 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbConstant
                // {
                //
                //   float gTextureScale;               // Offset:    0 Size:     4
                //      = 0x40a00000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbConstant                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEX                      0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEX                      0   xy          3     NONE  float   xy  
                // TEX                      1     zw        3     NONE  float     zw
                //
                vs_4_0
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_temps 4
                
                #line 58 "C:\Users\Anders\Documents\GitHub\dv1416-final-project\Shaders\Terrain.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // output<3:NaN:Inf>
                dp3 r0.x, v0.xyzx, cb0[0].xyzx  // output<4:NaN:Inf>
                dp3 r0.y, v0.xyzx, cb0[1].xyzx  // output<5:NaN:Inf>
                dp3 r0.z, v0.xyzx, cb0[2].xyzx  // output<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // output<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // output<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // output<9:NaN:Inf>
                mov r3.xy, v2.xyxx  // output<10,11>
                mul r3.zw, v2.xxxy, cb1[0].xxxx  // output<12:Inf,13:Inf>
                mov o0.xyzw, r1.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o3.xy, r3.xyxx  // VS<10,11>
                mov o3.zw, r3.zzzw  // VS<12:Inf,13:Inf>
                mov o1.xyz, r0.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer Lights
                // {
                //
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Position;               // Offset:   48
                //       float Range;                   // Offset:   60
                //       float3 Att;                    // Offset:   64
                //       float Pad;                     // Offset:   76
                //
                //   } gPointLights[4];                 // Offset:    0 Size:   320
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //   float3 gCameraPosition;            // Offset:  128 Size:    12
                //   float3 gTargetPosition;            // Offset:  144 Size:    12
                //   bool gUseBlendmap;                 // Offset:  156 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // gBlendmap                         texture  float4          2d    0        1
                // gLayermapArray                    texture  float4     2darray    1        1
                // Lights                            cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerObject                       cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEX                      0   xy          3     NONE  float   xy  
                // TEX                      1     zw        3     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[20], dynamicIndexed
                dcl_constantbuffer cb1[10], immediateIndexed
                dcl_constantbuffer cb2[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2darray (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.zw
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 70 "C:\Users\Anders\Documents\GitHub\dv1416-final-project\Shaders\Terrain.fx"
                add r0.x, cb1[9].x, l(1.000000)
                ge r0.x, r0.x, v1.x
                add r0.y, cb1[9].x, l(-1.000000)
                ge r0.y, v1.x, r0.y
                and r0.x, r0.y, r0.x
                add r0.y, cb1[9].z, l(1.000000)
                ge r0.y, r0.y, v1.z
                and r0.x, r0.y, r0.x
                add r0.y, cb1[9].z, l(-1.000000)
                ge r0.y, v1.z, r0.y
                and r0.x, r0.y, r0.x
                
                #line 83
                mov r1.xy, v3.zwzz
                mov r1.z, l(0)
                sample r1.xyzw, r1.xyzx, t1.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r2.xy, v3.zwzz
                mov r2.z, l(1.000000)
                sample r2.xyzw, r2.xyzx, t1.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v3.zwzz
                mov r3.z, l(2.000000)
                sample r3.xyzw, r3.xyzx, t1.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v3.zwzz
                mov r4.z, l(3.000000)
                sample r4.xyzw, r4.xyzx, t1.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v3.zwzz
                mov r5.z, l(4.000000)
                sample r5.xyzw, r5.xyzx, t1.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 70
                if_nz r0.x
                
                #line 74
                  mov o0.xyzw, l(1.000000,0,0,1.000000)  // PS<0: 1f,1: 0f,2: 0f,3: 1f>
                  ret 
                
                #line 70
                endif 
                
                #line 81
                ine r0.x, l(0, 0, 0, 0), cb1[9].w
                if_nz r0.x
                
                #line 89
                  sample r0.xyzw, v3.xyxx, t0.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r1.xyzw, r1.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r6.xyzw, -r1.xyzw
                  add r2.xyzw, r2.xyzw, r6.xyzw
                  mul r2.xyzw, r0.xxxx, r2.xyzw
                  add r1.xyzw, r1.xyzw, r2.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r2.xyzw, -r1.xyzw
                  add r2.xyzw, r2.xyzw, r3.xyzw
                  mul r2.xyzw, r0.yyyy, r2.xyzw
                  add r1.xyzw, r1.xyzw, r2.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r2.xyzw, -r1.xyzw
                  add r2.xyzw, r2.xyzw, r4.xyzw
                  mul r2.xyzw, r0.zzzz, r2.xyzw
                  add r1.xyzw, r1.xyzw, r2.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r2.xyzw, -r1.xyzw
                  add r2.xyzw, r2.xyzw, r5.xyzw
                  mul r0.xyzw, r0.wwww, r2.xyzw
                  add r0.xyzw, r0.xyzw, r1.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 98
                  mov r1.xyz, -v1.xyzx
                  add r1.xyz, r1.xyzx, cb1[8].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                  dp3 r1.w, r1.xyzx, r1.xyzx
                  sqrt r1.w, r1.w  // distToEye<0:NaN:Inf>
                  div r1.xyz, r1.xyzx, r1.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 106
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: -0f,1: -0f,2: -0f>
                
                #line 111
                  mov r1.w, l(0)  // i<0: 0u>
                  mov r3.xyz, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r2.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.w, r1.w  // i<0>
                  loop 
                    ult r3.w, r2.w, l(4)
                    breakc_z r3.w
                
                #line 114
                    nop 
                    mov r6.xyz, cb2[0].xyzx  // mat<0,1,2>
                    mov r7.xyz, cb2[1].xyzx  // mat<4,5,6>
                    mov r8.xyzw, cb2[2].xyzw  // mat<8,9,10,11>
                    imul null, r3.w, r2.w, l(5)
                    mov r9.xyz, cb0[r3.w + 0].xyzx  // L<0,1,2>
                    mov r10.xyz, cb0[r3.w + 1].xyzx  // L<4,5,6>
                    mov r11.xyz, cb0[r3.w + 2].xyzx  // L<8,9,10>
                    mov r12.xyz, cb0[r3.w + 3].xyzx  // L<12,13,14>
                    mov r4.w, cb0[r3.w + 3].w  // L<15>
                    mov r13.xyz, cb0[r3.w + 4].xyzx  // L<16,17,18>
                    mov r14.xyz, v1.xyzx  // pos<0,1,2>
                    mov r15.xyz, v2.xyzx  // normal<0,1,2>
                    mov r16.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 36 "Light.fx"
                    mov r14.xyz, -r14.xyzx
                    add r12.xyz, r12.xyzx, r14.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r3.w, r12.xyzx, r12.xyzx
                    sqrt r14.y, r3.w  // d<0:NaN:Inf>
                    lt r3.w, r4.w, r14.y
                    if_z r3.w
                      div r12.xyz, r12.xyzx, r14.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                      dp3 r3.w, r12.xyzx, r15.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 47
                      lt r4.w, l(0.000000), r3.w
                      mov r9.xyz, -r12.xyzx
                      dp3 r5.w, r9.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r12.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r9.xyzx, r12.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r5.w, r9.xyzx, r16.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w  // specFactor<0:NaN:Inf>
                      mul r7.xyz, r7.xyzx, r3.wwww
                      mul r7.xyz, r10.xyzx, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r8.xyz, r8.xyzx, r5.wwww
                      mul r8.xyz, r11.xyzx, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 47
                      movc r7.xyz, r4.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      movc r8.xyz, r4.wwww, r8.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                      mul r14.z, r14.y, r14.y
                      mov r14.x, l(1.000000)
                      dp3 r3.w, r13.xyzx, r14.xyzx
                      div r3.w, l(1.000000), r3.w  // att<0:NaN:Inf>
                      mul r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r8.xyz, r3.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 40
                    else 
                      mov r6.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 114 "C:\Users\Anders\Documents\GitHub\dv1416-final-project\Shaders\Terrain.fx"
                    mov r6.xyz, r6.xyzx  // A<0:Inf,1:Inf,2:Inf>
                    mov r7.xyz, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r3.xyz, r3.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 111
                    iadd r2.w, r2.w, l(1)  // i<0>
                  endloop 
                
                #line 121
                  add r1.xyz, r3.xyzx, r4.xyzx
                  mul r0.xyz, r0.xyzx, r1.xyzx
                  add r0.xyz, r5.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.w, r0.w, cb2[1].w  // litColor<3:NaN:Inf>
                  mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov o0.w, r0.w  // PS<3:NaN:Inf>
                  ret 
                
                #line 81
                endif 
                
                #line 126
                mov o0.xyzw, l(0,0,0,1.000000)  // PS<0: 0f,1: 0f,2: 0f,3: 1f>
                ret 
                // Approximately 134 instruction slots used
                            
            };
        }

    }

}

